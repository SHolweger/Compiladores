
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMASMENOSleftMULTIPLICACIONDIVISIONCADENA DIVISION FALSO IDENTIFICADOR IGUAL IMPRIMIR MAS MENOS MULTIPLICACION NUMERO VERDADEROprograma : instruccionesinstrucciones : instrucciones instruccion\n| instruccioninstruccion : IDENTIFICADOR IGUAL expresioninstruccion : IMPRIMIR expresionexpresion : expresion MAS expresion\n| expresion MENOS expresion\n| expresion MULTIPLICACION expresion\n| expresion DIVISION expresionexpresion : valorvalor : NUMEROvalor : CADENAvalor : VERDADERO\n| FALSO'
    
_lr_action_items = {'IDENTIFICADOR':([0,2,3,6,8,9,10,11,12,13,14,19,20,21,22,],[4,4,-3,-2,-5,-10,-11,-12,-13,-14,-4,-6,-7,-8,-9,]),'IMPRIMIR':([0,2,3,6,8,9,10,11,12,13,14,19,20,21,22,],[5,5,-3,-2,-5,-10,-11,-12,-13,-14,-4,-6,-7,-8,-9,]),'$end':([1,2,3,6,8,9,10,11,12,13,14,19,20,21,22,],[0,-1,-3,-2,-5,-10,-11,-12,-13,-14,-4,-6,-7,-8,-9,]),'IGUAL':([4,],[7,]),'NUMERO':([5,7,15,16,17,18,],[10,10,10,10,10,10,]),'CADENA':([5,7,15,16,17,18,],[11,11,11,11,11,11,]),'VERDADERO':([5,7,15,16,17,18,],[12,12,12,12,12,12,]),'FALSO':([5,7,15,16,17,18,],[13,13,13,13,13,13,]),'MAS':([8,9,10,11,12,13,14,19,20,21,22,],[15,-10,-11,-12,-13,-14,15,-6,-7,-8,-9,]),'MENOS':([8,9,10,11,12,13,14,19,20,21,22,],[16,-10,-11,-12,-13,-14,16,-6,-7,-8,-9,]),'MULTIPLICACION':([8,9,10,11,12,13,14,19,20,21,22,],[17,-10,-11,-12,-13,-14,17,17,17,-8,-9,]),'DIVISION':([8,9,10,11,12,13,14,19,20,21,22,],[18,-10,-11,-12,-13,-14,18,18,18,-8,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,6,]),'expresion':([5,7,15,16,17,18,],[8,14,19,20,21,22,]),'valor':([5,7,15,16,17,18,],[9,9,9,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> instrucciones','programa',1,'p_programa','parser.py',13),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','parser.py',17),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','parser.py',18),
  ('instruccion -> IDENTIFICADOR IGUAL expresion','instruccion',3,'p_instruccion_asignacion','parser.py',25),
  ('instruccion -> IMPRIMIR expresion','instruccion',2,'p_instruccion_imprimir','parser.py',30),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_binaria','parser.py',34),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_binaria','parser.py',35),
  ('expresion -> expresion MULTIPLICACION expresion','expresion',3,'p_expresion_binaria','parser.py',36),
  ('expresion -> expresion DIVISION expresion','expresion',3,'p_expresion_binaria','parser.py',37),
  ('expresion -> valor','expresion',1,'p_expresion_valor','parser.py',41),
  ('valor -> NUMERO','valor',1,'p_valor_numero','parser.py',45),
  ('valor -> CADENA','valor',1,'p_valor_cadena','parser.py',49),
  ('valor -> VERDADERO','valor',1,'p_valor_booleano','parser.py',53),
  ('valor -> FALSO','valor',1,'p_valor_booleano','parser.py',54),
]
